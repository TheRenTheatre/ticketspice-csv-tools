#!/usr/bin/env ruby -w

require 'csv'
require 'date'

unless ARGV.length == 1
  warn "Usage: #{$0} path/to/orders.csv\n\n"
  exit 1
end

REQUIRED_TICKETSPICE_FIELDS = ["Page Name",
                               "Date Selection",
                               "Billing Name (First Name)",
                               "Billing Name (Last Name)",
                               "Billing Email Address",
                               "Billing Phone Number",
                               "Billing Address (Address 1)",
                               "Billing Address (City)",
                               "Billing Address (State/Province)",
                               "Billing Address (Country)",
                               "Billing Address (Postal Code)"]


def tags_to_apply(page_name, date_selection)
  tags = []
  if date_selection.nil? # one-off events
    date = year = nil
  else
    date = Date.parse(date_selection)
    year = date.year
  end

  if page_name == "Nosferatu" && year == 2021
    tags << "Patrons - 2021 - Nosferatu, Entire Run"
    tags << case date
            when Date.parse("2021-10-01")..Date.parse("2021-10-02")
              "Patrons - 2021 - Nosferatu, 1st Week"
            when Date.parse("2021-10-08")..Date.parse("2021-10-09")
              "Patrons - 2021 - Nosferatu, 2nd Week"
            when Date.parse("2021-10-15")..Date.parse("2021-10-16")
              "Patrons - 2021 - Nosferatu, 3rd Week"
            when Date.parse("2021-10-22")..Date.parse("2021-10-23")
              "Patrons - 2021 - Nosferatu, 4th Week"
            when Date.parse("2021-10-28")..Date.parse("2021-10-31")
              "Patrons - 2021 - Nosferatu, 5th Week"
            when Date.parse("2021-11-05")..Date.parse("2021-11-06")
              "Patrons - 2021 - Nosferatu, 6th Week"
            else raise "Unknown show date for Nosferatu: #{date}"
            end

  elsif page_name == "The Office Holiday Party Musical Extravaganza Show" && year == 2021
    tags << "Patrons - 2021 - The Office Holiday Party Musical Extravaganza Show, Entire Run"
    tags << case date
            when Date.parse("2021-12-02")..Date.parse("2021-12-05")
              "Patrons - 2021 - The Office Holiday Party Musical Extravaganza Show, 1st Week"
            when Date.parse("2021-12-09")..Date.parse("2021-12-12")
              "Patrons - 2021 - The Office Holiday Party Musical Extravaganza Show, 2nd Week"
            when Date.parse("2021-12-16")..Date.parse("2021-12-19")
              "Patrons - 2021 - The Office Holiday Party Musical Extravaganza Show, 3rd Week"
            else raise "Unknown show date for Office Party: #{date}"
            end

  elsif page_name =~ /^Dickens by Candl?elight$/ && year == 2021
    # It was misspelled "Candelight" in Ticketspice
    tags << "Patrons - 2021 - Dickens by Candlelight, Entire Run"

  elsif page_name == "La Medéa" && year == 2022
    tags << "Patrons - 2022 - La Medéa, Entire Run"
    tags << case date
            when Date.parse("2022-01-21")..Date.parse("2022-01-23")
              "Patrons - 2021 - La Medéa, 1st Week"
            when Date.parse("2022-01-28")..Date.parse("2022-01-30")
              "Patrons - 2021 - La Medéa, 2nd Week"
            when Date.parse("2022-02-04")..Date.parse("2022-02-06")
              "Patrons - 2021 - La Medéa, 3rd Week"
            when Date.parse("2022-02-10")..Date.parse("2022-02-13")
              "Patrons - 2021 - La Medéa, 4th Week"
            else raise "Unknown show date for La Medéa: #{date}"
            end
  elsif page_name == "Stephen Pugh in Concert"
    # One-off event: Feb 9 2022 at 8 PM
    tags << "Patrons - 2022 - Stephen Pugh in Concert"
  elsif page_name == "Laurel Hatfield in Concert"
    # One-off event: Feb 22 2022 at 8 PM
    tags << "Patrons - 2022 - Laurel Hatfield in Concert"
  elsif page_name == "Oscar Wilde and Jesus Christ Walk Into a Gay Bar" && year == 2022
    tags << "Patrons - 2022 - Oscar Wilde and Jesus Christ Walk Into a Gay Bar, Entire Run"
    tags << case date
            when Date.parse("2022-02-20")
              "Patrons - 2022 - Oscar Wilde and Jesus Christ Walk Into a Gay Bar, 1st Week"
            when Date.parse("2022-02-27")
              "Patrons - 2022 - Oscar Wilde and Jesus Christ Walk Into a Gay Bar, 2nd Week"
            when Date.parse("2022-03-06")
              "Patrons - 2022 - Oscar Wilde and Jesus Christ Walk Into a Gay Bar, 3rd Week"
            when Date.parse("2022-03-13")
              "Patrons - 2022 - Oscar Wilde and Jesus Christ Walk Into a Gay Bar, 4th Week"
            else raise "Unknown show date for Oscar Wilde and Jesus Christ Walk Into a Gay Bar: #{date}"
            end
  else
    raise "Unknown combination of Page Name (#{page_name.inspect}) and year (#{date_selection.inspect} parsed as #{year.inspect})"
  end

  tags
end

def mailchimp_style_combined_address_field_for_row(row)
  joined = [row["Address - Street Address"],
            row["Address - City"],
            row["Address - State/Prov/Region"],
            row["Address - Zip/Postal"].to_s[0...5],
            row["Address - Country"]].join("  ")

   return nil if joined.strip.empty?
   joined
end


ticketspice_to_mailchimp_converter = proc { |ticketspice_header|
  translation = Hash.new { |h, key| h[key] = key; key }
  translation.merge!(
    "Billing Name (First Name)"        => "First Name",
    "Billing Name (Last Name)"         => "Last Name",
    "Billing Email Address"            => "Email Address",
    "Billing Phone Number"             => "Phone",
    "Billing Address (Address 1)"      => "Address - Street Address",
    "Billing Address (City)"           => "Address - City",
    "Billing Address (State/Province)" => "Address - State/Prov/Region",
    "Billing Address (Country)"        => "Address - Country",
    "Billing Address (Postal Code)"    => "Address - Zip/Postal"
  )
  translation[ticketspice_header]
}

file_contents = File.read(ARGV[0], encoding: 'bom|utf-8')

# Make sure we have all the fields we need
header_test_csv = CSV.parse(file_contents.lines.first, headers: true)
missing_headers = REQUIRED_TICKETSPICE_FIELDS.sort - header_test_csv.headers.sort
if missing_headers.any?
  raise "Your orders report is missing these required fields: #{missing_headers.inspect}"
end

# Parse whole file and rename headers to Mailchimp's names
table = CSV.parse(file_contents, headers: true,
                                 header_converters: ticketspice_to_mailchimp_converter)

# Add two more fields
table.each do |row|
  row["Tags"] = tags_to_apply(row["Page Name"], row["Date Selection"]).map(&:inspect).join(",")
  row["Address"] = mailchimp_style_combined_address_field_for_row(row)
end

# Finally, generate a new one that only includes the fields they want
table.by_col!
table.delete_if { |header, data|
  !["First Name", "Last Name", "Email Address", "Phone", "Address", "Tags"].include?(header)
}


puts table.to_s

# TODO Okay that was good but it should unique them on email, join their tags, and prompt when the
# name/address/phone is different or something.
